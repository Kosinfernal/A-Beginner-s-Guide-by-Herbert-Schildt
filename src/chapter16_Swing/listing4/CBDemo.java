package chapter16_Swing.listing4;
// Demonstrate check boxes.

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
/**При установке или сбросе флажка генерируется событие элемента.
 * События элементов представляются классом itemEvent и обрабатываются классами,
 * реализующими интерфейс itemListener.
 * В этом интерфейсе определен только один метод, itemStateChanged()*/
public class CBDemo implements ItemListener, ActionListener {

    JLabel jlabSelected;
    JLabel jlabChanged;
    JLabel jlb;
    JCheckBox jcbAlpha;
    JCheckBox jcbBeta;
    JCheckBox jcbGamma;
    JCheckBox jcbOmega;

    CBDemo() {
        JFrame jfrm = new JFrame("Demonstrate Check Boxes");
        // Specify FlowLayout for the layout manager.
        jfrm.setLayout(new FlowLayout());
        jfrm.setSize(360, 150);
        jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jfrm.setVisible(true);
        JButton jb = new JButton("Кнопочка");

        // Create empty labels.
        jlabSelected = new JLabel("");
        jlabChanged = new JLabel("");
        jlb = new JLabel("");

        // Make check boxes.
        // Создать флажки
        jcbAlpha = new JCheckBox("Alpha");
        jcbBeta = new JCheckBox("Beta");
        jcbGamma = new JCheckBox("Gamma");
        jcbOmega = new JCheckBox("Omega");

        // Events generated by the check boxes
        // are handled in common by the itemStateChanged()
        // method implemented by CBDemo.
        jcbAlpha.addItemListener(this);
        jcbBeta.addItemListener(this);
        jcbGamma.addItemListener(this);
        jcbOmega.addItemListener(this);
        jb.addActionListener(this);

        // Add checkboxes and labels to the content pane.
        // Добавить флажки и метки на панель содержимого
        jfrm.add(jcbAlpha);
        jfrm.add(jcbBeta);
        jfrm.add(jcbGamma);
        jfrm.add(jcbOmega);
        jfrm.add(jlabChanged);
        jfrm.add(jlabSelected);
        jfrm.add(jb);
        jfrm.add(jlb);

    }

    // This is the handler for the check boxes.
    // Обработчик для флажков
    @Override
    public void itemStateChanged(ItemEvent ie) {
        String str = "";

        // Obtain a reference to the check box that caused the event.
        // Получить ссылку на флажок, с которым связано событие
/**Приведение к типу JCheckBox необходимо потому, что метод getItem()
 * возвращает ссылку на объект типа Object.*/
        JCheckBox cb = (JCheckBox) ie.getItem();

        // Report what check box changed.
        // Сообщить о том, состояние какого флажка изменилось
/**Далее метод itemStateChanged() вызывает метод isSelected() для объекта cb,
 * чтобы определить текущее состояние флажка.
 * Если метод isSelected() возвращает значение true, значит, флажок установлен,
 * а если false — флажок сброшен.*/
        if(cb.isSelected())
/**Затем с помощью метки jlabChanged отображаются сведения о выполненном действии*/
            jlabChanged.setText(cb.getText() + " was just selected.");
        else
            jlabChanged.setText(cb.getText() + " was just cleared.");

        // Report all selected boxes.
        // Сообщить обо всех установленных флажках
        if(jcbAlpha.isSelected()) str += "Alpha ";
        if(jcbBeta.isSelected()) str += "Beta ";
        if(jcbGamma.isSelected()) str += "Gamma ";
        if(jcbOmega.isSelected()) str += "Omega";

        jlabSelected.setText("Selected check boxes: " + str);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //Использование команды действия для определения состояния кнопки
        if(e.getActionCommand().equals("Кнопочка"))
            jlb.setText("Ты нажал на кнопочку! Красавчик!");
    }

    public static void main(String args[]) {
        // Create the frame on the event dispatching thread.
        // Создать фрейм в потоке диспетчеризации событий
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new CBDemo();
            }
        });
    }
}
